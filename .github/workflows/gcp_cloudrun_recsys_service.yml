name: Build and deploy recommendation service to Cloud Run

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      logLevel:
        description: "Log level"
        required: true
        default: "info"
        type: choice
        options:
          - info
          - warning
          - debug
      tags:
        description: "Image tags"
        required: false
        type: string

env:
  REGION: ${{ secrets.GCP_REGION || 'us-central1' }}
  SERVICE_NAME: recommendation-service
  REPOSITORY: ${{ secrets.RECSYS_REGISTRY_REPOSITORY }}
  IMAGE: recommendation-engine

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    # Only deploy on push to main/dev, not on PRs
    if: github.event_name != 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.RECSYS_GCP_CREDENTIALS }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker $REGION-docker.pkg.dev

      - name: Build and push Docker image
        run: |
          # Get project ID from gcloud
          PROJECT_ID=$(gcloud config get-value project)
          REGISTRY="$REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY"
          IMAGE_NAME="$REGISTRY/$IMAGE"

          echo "Project ID: $PROJECT_ID"
          echo "Registry: $REGISTRY"
          echo "Image Name: $IMAGE_NAME"

          # Build the Docker image
          docker build -t $IMAGE_NAME:${{ github.sha }} .
          docker build -t $IMAGE_NAME:latest .

          # Push to Artifact Registry
          docker push $IMAGE_NAME:${{ github.sha }}
          docker push $IMAGE_NAME:latest

          echo "Successfully pushed image: $IMAGE_NAME:${{ github.sha }}"
          echo "Successfully pushed image: $IMAGE_NAME:latest"

          # Export for next step
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
          echo "PROJECT_ID=$PROJECT_ID" >> $GITHUB_ENV

      - name: Deploy to Cloud Run
        run: |
          echo "Deploying to Cloud Run..."

          # Create environment variables file to avoid JSON escaping issues
          cat > env.yaml << EOF
          RECSYS_GCP_CREDENTIALS: '${{ secrets.RECSYS_GCP_CREDENTIALS }}'
          DEV_MODE: '${{ secrets.DEV_MODE }}'
          GCP_PROJECT_ID: '${{ secrets.RECSYS_PROJECT_ID }}'
          PROXY_REDIS_HOST: '${{ secrets.RECSYS_PROXY_REDIS_HOST }}'
          RECYSYS_PROXY_REDIS_HOST: '${{ secrets.RECSYS_PROXY_REDIS_HOST }}'
          RECSYS_PROXY_REDIS_PORT: '${{ secrets.RECSYS_PROXY_REDIS_PORT }}'
          REGION: '${{ secrets.REGION }}'
          RECSYS_SERVICE_REDIS_AUTHKEY: '${{ secrets.RECSYS_SERVICE_REDIS_AUTHKEY }}'
          SERVICE_REDIS_CLUSTER_ENABLED: '${{ secrets.SERVICE_REDIS_CLUSTER_ENABLED }}'
          RECSYS_SERVICE_REDIS_HOST: '${{ secrets.RECSYS_SERVICE_REDIS_HOST }}'
          RECSYS_SERVICE_REDIS_INSTANCE_ID: '${{ secrets.RECSYS_SERVICE_REDIS_INSTANCE_ID }}'
          RECSYS_SERVICE_REDIS_PORT: '${{ secrets.RECSYS_SERVICE_REDIS_PORT }}'
          USE_REDIS_PROXY: '${{ secrets.USE_REDIS_PROXY }}'
          WORKERS: '${{ secrets.WORKERS }}'
          MARKETING_ANALYTICS_AUTH_TOKEN: '${{ secrets.MARKETING_ANALYTICS_AUTH_TOKEN }}'
          MARKETING_ANALYTICS_SERVER_BASE_URL: '${{ secrets.MARKETING_ANALYTICS_SERVER_BASE_URL }}'
          SENTRY_DSN: '${{ secrets.SENTRY_DSN }}'
          CLOUD_RUN_DEPLOYMENT: 'true'
          EOF

          gcloud run deploy $SERVICE_NAME \
            --image $IMAGE_NAME:${{ github.sha }} \
            --allow-unauthenticated \
            --service-account dolr-ai-recommendation-engine@hot-or-not-feed-intelligence.iam.gserviceaccount.com \
            --concurrency 500 \
            --cpu 8 \
            --memory 8Gi \
            --env-vars-file env.yaml \
            --vpc-connector projects/$PROJECT_ID/locations/$REGION/connectors/vpc-for-cloudrun-redis \
            --vpc-egress private-ranges-only \
            --region $REGION \
            --max-instances 10 \
            --min-instances 0 \
            --platform managed \
            --timeout 300s

          echo "Deployment completed successfully!"

      - name: Get Service URL
        run: |
          SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format="value(status.url)")
          echo "üöÄ Service deployed at: $SERVICE_URL"
          echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV

  # Separate job for PR validation (build only, no deploy)
  validate-pr:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.RECSYS_GCP_CREDENTIALS }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker $REGION-docker.pkg.dev

      - name: Build Docker image (validation only)
        run: |
          PROJECT_ID=$(gcloud config get-value project)
          REGISTRY="$REGION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY"
          IMAGE_NAME="$REGISTRY/$IMAGE"

          echo "üîç Validating Docker build for PR..."
          docker build -t $IMAGE_NAME:pr-${{ github.event.number }} .
          echo "‚úÖ Docker build successful!"
