name: Build and Deploy to Cloud Run

on:
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ secrets.GCP_REGION || 'us-central1' }}
  SERVICE_NAME: recommendation-engine
  REGISTRY: ${{ secrets.GCP_REGION || 'us-central1' }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/recommendation-engine-registry
  IMAGE_NAME: ${{ secrets.GCP_REGION || 'us-central1' }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/recommendation-engine-registry/recommendation-engine

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Google Auth
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker for Artifact Registry
      run: gcloud auth configure-docker $REGION-docker.pkg.dev

    - name: Build and push Docker image
      run: |
        # Build the Docker image
        docker build -t $IMAGE_NAME:${{ github.sha }} .
        docker build -t $IMAGE_NAME:latest .

        # Push to Artifact Registry
        docker push $IMAGE_NAME:${{ github.sha }}
        docker push $IMAGE_NAME:latest

    - name: Deploy to Cloud Run
      run: |
        # Deploy to Cloud Run
        gcloud run deploy $SERVICE_NAME \
          --image $IMAGE_NAME:${{ github.sha }} \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated \
          --port 8000 \
          --memory 2Gi \
          --cpu 2 \
          --max-instances 10 \
          --min-instances 0 \
          --timeout 300 \
          --concurrency 80 \
          --set-env-vars "API_PORT=8000" \
          --set-env-vars "PYTHONPATH=/app" \
          --set-env-vars "UV_SYSTEM_PYTHON=1" \
          --set-env-vars "GCP_CREDENTIALS=${{ secrets.GCP_CREDENTIALS }}"

    - name: Get service URL
      run: |
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --platform managed --region $REGION --format 'value(status.url)')
        echo "Service URL: $SERVICE_URL"
        echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV

    - name: Health check
      run: |
        # Wait a bit for the service to be ready
        sleep 30

        # Perform health check
        curl -f $SERVICE_URL/ || exit 1

  production-deploy:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    environment: production

    steps:
    - name: Google Auth
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Deploy to Production
      run: |
        # Deploy to production environment
        gcloud run deploy $SERVICE_NAME-prod \
          --image $IMAGE_NAME:${{ github.sha }} \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated \
          --port 8000 \
          --memory 4Gi \
          --cpu 4 \
          --max-instances 10 \
          --min-instances 1 \
          --timeout 300 \
          --concurrency 100 \
          --set-env-vars "API_PORT=8000" \
          --set-env-vars "PYTHONPATH=/app" \
          --set-env-vars "UV_SYSTEM_PYTHON=1" \
          --set-env-vars "GCP_CREDENTIALS=${{ secrets.GCP_CREDENTIALS }}"

    - name: Production Health check
      run: |
        # Wait for production deployment
        sleep 60

        # Get production service URL
        PROD_URL=$(gcloud run services describe $SERVICE_NAME-prod --platform managed --region $REGION --format 'value(status.url)')

        # Perform health check
        curl -f $PROD_URL/ || exit 1
